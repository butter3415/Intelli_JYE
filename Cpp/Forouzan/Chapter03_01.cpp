//
// Created by 82104 on 2023-02-09.
// 03 표현식과 문장 - 표현식의 개요
/* 표현식 : 특정 값을 가진 엔티티(개체), 메모리 상태 변경 가능
 *       : 단순한 값을 만들거나 연산자를 사용해 값들을 결합해 또 다른 새로운 값을 만드는 식
 *       : 표현식과 표현식을 결합해서 새로운 표현식을 만들 수도 있음.
 *       : C++의 연산자 - 피연산자를 3개까지 가질 수 있다.
 * * 부가 효과 : 메모리의 상태를 조작하는 행위
 *
 * C++ 표현식의 예 : 기본 표현식 / 단항 표현식 / 곱셈 표현식 / 덧셈 표현식 / 할당 표현식
 */

# include <iostream>
using namespace std;

int main() {

// 02 기본 표현식 : 연산자 없이 구성된 간단한 표현식 & 표현식 중 가장 우선순위가 높음
// !(리터럴) bool, char, string, int, long int, float, double, long double * short 는 없음
// 리터럴 표현식 몇 가지
//    cout << false << " / " << 'H' << " / " << "Highlight" << endl;
//    cout << 3415 << " / " << 12223415L << endl;
//    cout << 98.05F << " / " << 114.855 << " / " << 2.051L << endl;
//    cout << endl;

// !(이름)으로 사용되는 식별자 - 변수, 객체 이름, 함수 이름 등

// !(괄호 표현식) : 우선 순위 낮은 표현식을 기본 표현식으로 변경하고 싶을 때 괄호로 묶는다.
// 괄호 표현식 몇 가지
//    int x = 4;
//
//    cout << "괄호 O 경우의 값 : " << ( x + 3 ) * 5 << endl;   // 35
//    cout << "괄호 X 경우의 값 : " << x + 3 * 5 << endl;       // 19
//    cout << endl;
//
//    cout << "괄호 O 경우의 값 : " << 12 / ( x + 2 ) << endl;  //  2
//    cout << "괄호 X 경우의 값 : " << 12 / x + 2 << endl;      //  5

// 03 단항 표현식 : 하나의 값(피연산자)에 +, - 등의 연산자를 같이 사용
// 덧셈/ 뺄셈 표현식 몇 가지

//    int x = 4;
//    int y = -10;
//
//    cout << "x 에 양수 연산자 적용 : " << +x << endl;   // 4 -> 4
//    cout << "x 에 음수 연산자 적용 : " << -x << endl;   // 4 -> -4
//
//    cout << "y 에 양수 연산자 적용 : " << +y << endl;   // -10 -> -10
//    cout << "y 에 음수 연산자 적용 : " << -y << endl;   // -10 -> 10
//    cout << endl;

// sizeof 표현식 : 표현식의 크기나 자료형의 크기를 확인할 때 사용
// sizeof expression (표현식 크기 구하기) / sizeof(type) (자료형의 크기 구하기)

// 04 곱셈 표현식 : 왼쪽과 오른쪽에 피연산자가 있는 이항 표현식 (곱셈, 나눗셈, 나머지)
// !곱셈 - *!// !나눗셈 - /! // !나머지 - %!

// 곱셈 표현식 확인
    cout << "곱셈 연산자 확인하기" << endl;
    cout << "4 * 5 = " << 4 * 5 << endl;
    cout << "2.4 * 4.1 = " << 2.4 * 4.1 << endl;
    cout << "-3 * 4 = " << -3 * 4 << endl;

    cout << "나눗셈 연산자 확인하기" << endl;
    cout << "30 / 5 = " << 30 / 5 << endl;
    cout << "4 / 7 = " << 4 / 7 << endl;

    cout << "나머지 연산자 확인하기" << endl;
    cout << " 30 % 5 = " << 30 % 5 << endl;
    cout << " 30 % 4 = " << 30 % 4 << endl;
    cout << " 3 % 7 = " << 3 % 7 << endl;

}