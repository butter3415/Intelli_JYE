//
// Created by 82104 on 2023-02-09.
// 03 표현식과 문장 - 표현식의 개요
/* 표현식 : 특정 값을 가진 엔티티(개체), 메모리 상태 변경 가능
 *       : 단순한 값을 만들거나 연산자를 사용해 값들을 결합해 또 다른 새로운 값을 만드는 식
 *       : 표현식과 표현식을 결합해서 새로운 표현식을 만들 수도 있음.
 *       : C++의 연산자 - 피연산자를 3개까지 가질 수 있다.
 * * 부가 효과 : 메모리의 상태를 조작하는 행위
 *
 * C++ 표현식의 예 : 기본 표현식 / 단항 표현식 / 곱셈 표현식 / 덧셈 표현식 / 할당 표현식
 */

# include <iostream>
using namespace std;

int main() {

// 02 기본 표현식 : 연산자 없이 구성된 간단한 표현식 & 표현식 중 가장 우선순위가 높음
// !(리터럴) bool, char, string, int, long int, float, double, long double * short 는 없음
// 리터럴 표현식 몇 가지
//    cout << false << " / " << 'H' << " / " << "Highlight" << endl;
//    cout << 3415 << " / " << 12223415L << endl;
//    cout << 98.05F << " / " << 114.855 << " / " << 2.051L << endl;
//    cout << endl;

// !(이름)으로 사용되는 식별자 - 변수, 객체 이름, 함수 이름 등

// !(괄호 표현식) : 우선 순위 낮은 표현식을 기본 표현식으로 변경하고 싶을 때 괄호로 묶는다.
// 괄호 표현식 몇 가지
//    int x = 4;
//
//    cout << "괄호 O 경우의 값 : " << ( x + 3 ) * 5 << endl;   // 35
//    cout << "괄호 X 경우의 값 : " << x + 3 * 5 << endl;       // 19
//    cout << endl;
//
//    cout << "괄호 O 경우의 값 : " << 12 / ( x + 2 ) << endl;  //  2
//    cout << "괄호 X 경우의 값 : " << 12 / x + 2 << endl;      //  5

// 03 단항 표현식 : 하나의 값(피연산자)에 +, - 등의 연산자를 같이 사용
// 덧셈/ 뺄셈 표현식 몇 가지

//    int x = 4;
//    int y = -10;
//
//    cout << "x 에 양수 연산자 적용 : " << +x << endl;   // 4 -> 4
//    cout << "x 에 음수 연산자 적용 : " << -x << endl;   // 4 -> -4
//
//    cout << "y 에 양수 연산자 적용 : " << +y << endl;   // -10 -> -10
//    cout << "y 에 음수 연산자 적용 : " << -y << endl;   // -10 -> 10
//    cout << endl;

// sizeof 표현식 : 표현식의 크기나 자료형의 크기를 확인할 때 사용
// sizeof expression (표현식 크기 구하기) / sizeof(type) (자료형의 크기 구하기)

// 04 곱셈 표현식 : 왼쪽과 오른쪽에 피연산자가 있는 이항 표현식 (곱셈, 나눗셈, 나머지)
// !곱셈 - *!// !나눗셈 - /! // !나머지 - %!

// 곱셈 표현식 확인
//    cout << "곱셈 연산자 확인하기" << endl;
//    cout << "4 * 5 = " << 4 * 5 << endl;
//    cout << "2.4 * 4.1 = " << 2.4 * 4.1 << endl;
//    cout << "-3 * 4 = " << -3 * 4 << endl;
//
//    cout << "나눗셈 연산자 확인하기" << endl;
//    cout << "30 / 5 = " << 30 / 5 << endl;
//    cout << "4 / 7 = " << 4 / 7 << endl;
//
//    cout << "나머지 연산자 확인하기" << endl;
//    cout << "30 % 5 = " << 30 % 5 << endl;
//    cout << "30 % 4 = " << 30 % 4 << endl;
//    cout << "3 % 7 = " << 3 % 7 << endl;

// 05 덧셈 표현식 : 왼쪽과 오른쪽에 피연산자가 있는 이항 표현식 (덧셈, 뺄셈 연산자 포함 표현식)

// 덧셈 뺼셈 표현식
//    cout << "덧셈 연산자 확인하기" << endl;
//    cout << "30 + 5 = " << 30 + 5 << endl;
//    cout << "20.5 + 6.2" << 20.5 + 6.2 << endl;
//
//    cout << "뺄셈 연산자 확인하기" << endl;
//    cout << "5 - 30 = " << 5 - 30 << endl;
//    cout << "51.2 - 30.4 = " << 51.2 - 30.4 << endl;

// 06 할당 표현식 : 값을 만들면서 컴퓨터의 메모리 상태를 변경하는 부가 작용 발생
// - 단순 할당( = 기호 사용 ) : 피연산자를 2개 갖는 이항 표현식
//                         : 표현식의 결과 값 변수에 저장 -> 이전 값 사라지고 새로운 값 저장되는 부가 작용 발생 -> 얻은 값 결과로 나타냄

// 단순 할당 연산자 확인
//    int x;
//    int y;
//
//    cout << "할당 표현식의 리턴값 " << ( x = 14 ) << endl;
//    cout << "변수 x의 값 " << x << endl;
//
//    cout << "할당 표현식의 리턴값 " << ( y = 87 ) << endl;
//    cout << "변수 y의 값 " << y << endl;

// - 복합 할당( 할당 연산자(=)와 오른쪽 연산자(+) 결합하여 특별한 연산자(+=) 제공 )
//          : 변수 내용 변경하고 그 결과를 다시 변수에 저장하기 위한 코드 (ex. x = x + 5 -> x += 5)
//          : 두 개의 연산자가 붙어 있어야 한다.

// 복합 할당 표현식 몇 가지
    int x = 20;
    int y = 30;
    int z = 40;
    int t = 50;
    int u = 60;

    x += 5;
    y -= 3;
    z *= 10;
    t /= 8;
    u %= 7;

    cout << "x 값 : " << x << endl;  // 25
    cout << "y 값 : " << y << endl;  // 27
    cout << "z 값 : " << z << endl;  // 400
    cout << "t 값 : " << t << endl;  // 6
    cout << "u 값 : " << u << endl;  // 4

// 07 lvalue 와 rvalue
// 할당 연산자 왼쪽에 놓는 엔티티 : lvalue(left value) - 값의 목적지
// 할당 연산자 오른쪽에 놓는 엔티티 : rvalue(right value) - 값의 소스
// x = 3 -> lvalue : x / rvalue : 3
// x += 3 ===> x = x + 3 -> x는 왼쪽과 오른쪽에 모두 온다. 이 경우 값의 목적지이자 소스로 모두 동작하므로 x 는 lvalue 이자 rvalue 임





}