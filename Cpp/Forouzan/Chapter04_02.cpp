// 04 조건문
// Created by 82104 on 2023-02-15.
// 02 논리 표현식

// 복잡한 결정을 만들 때 활용할 수 있는 3가지 논리 표현식
// 논리 표현식 : 피연산자 하나 이상이 불 자료형이고 최종적으로 불 자료형을 생성하는 표현식
// NOT(!, 논리 부정) - 우선순위가 높으나 결합 방향이 오른쪽에서 왼쪽
// AND(&&, 논리곱), OR(||, 논리합) - 우선순위가 굉장히 낮다

// NOT 표현식 : 피연산자 하나, 불 자료형으로 변환 후 연산
// AND 표현식 : 피연산자 2개 모두 true일 때만 결과 true, 이외의 경우 모두 false.
// OR 표현식 : 피연산자 2개 모두 false일 때만 결과 false, 이외의 경우 모두 true.
// * 결과를 쉽게 이해하려면 괄호 사용

# include <iostream>
using namespace std;

int main() {

//// [2] 논리 표현식 사용
//// : 관계 표현식과 일치 표현식을 논리 표현식으로 조합하면 복잡한 조건을 만들 수 있다.
//
//// - AND 표현식 사용 (조건1 && 조건2)
//    int age;
//    bool ageLimit;
//
//    cout << "나이 :";
//    cin >> age;
//
//    if ((age >= 25) && (age <= 100)) {
//        cout << "자동차를 대여할 수 있습니다.";
//    } else {
//        cout << "죄송합니다. 자동차 대여가 어렵습니다.";
//    }

//// - OR 표현식 사용 (조건1 || 조건2)
//// * 특정한 온도 범위에 따라 에어컨을 냉방 또는 난방으로 가동하는 프로그램
//
//    int temperature;
//    bool hotTemp, coolTemp;
//
//    cout << "현재 온도 :";
//    cin >> temperature;
//
//    if ((temperature >= 23) || (temperature <= 15)){
//        cout << "에어컨이 켜집니다." << endl;
//        if (temperature >= 23){
//            cout << "냉방 모드로 작동합니다.";
//        } else if (temperature <= 15){
//            cout << "난방 모드로 작동합니다.";
//        }
//    } else {
//        cout << "에어컨이 꺼집니다.";
//    }

//// - NOT 표현식 사용 (논리 표현식 값 반전)
//// * 3가지 조건을 확인하여 윤년을 찾는 프로그램
//// * 윤년 = 400으로 나눌 수 있는가? || (4로 나눌 수 있는가? && !100으로 나눌 수 있는가?)
//
//    int year;
//    bool div400, div4, div100;
//
//    cout << "연도 :";
//    cin >> year;
//
//    div400 = (year % 400) == 0;
//    div4 = (year % 4) == 0;
//    div100 = (year % 100) == 0;
//
//    if ((div400) || ((div4) && (!div100))){
//        cout << year << "년은 윤년입니다.";
//    } else {
//        cout << year << "년은 윤년이 아닙니다.";
//    }

//// - 부정 연산자 제거
////   1) 관계 연산자와 일치 연산자를 포함하는 표현식
////      !(x < 7) => (x >= 7) / !(x >= 7) => (x < 7)
////   2) AND 연산자와 OR 연산자를 포함하는 표현식(드 모르간의 법칙)
////      !(x && y) => (!x || !y) / !(x || y) => (!x && !y)
/* * EX) 온도가 5도 미만(너무 추운 경우) or 30도 이상(너무 더운 경우) => 조깅 그만
 * (종료 조건) : (temp < 5) || (temp >= 30)
 * (계속 조건) : !(temp < 5) && !(temp >= 30)
 *            : (temp >= 5) && (temp < 30)
 * (드모르간법칙) : !((temp < 5) || (temp >= 30)) => ((temp >= 5) && (temp < 30))
 */

// if 블록과 else 블록 위치 바꾸기
/*  if (x) { |          | if (!x) {
 *           |          |     문장;
 *  } else { |   ===>   | }
 *      문장; |          |
 *  }        |          |
 */

// - AND, OR 연산자의 단락 평가
// (C++ 은 논리 AND와 논리 OR 표현식의 효율성을 위해서 단락 평가를 활용해 논리 표현식을 처리합니다.)

// - AND 연산자의 단락 평가 : AND 표현식의 왼쪽 피연산자가 false 라면 오른쪽 피연산자를 평가하지 않습니다.
//                       : 첫 번째 조건문이 맞지 않으면 결국 false 이기 때문에 두 번째 조건문은 보지도 않는다 ^^.
//                       : (3 < 2) && (x = 2) -> 두 번째 피연산자가 무시되며 x가 변경되지 않음
//                       : (2 < 6) && (x = 2) -> 두 번째 피연산자가 평가되며 x에 정수 2 저장.

// - OR 연산자의 단락 평가 : OR 표현식의 왼쪽 피연산자가 true 라면 오른쪽 피연산자를 평가하지 않습니다.
//                      : 첫 번째 조건문이 맞으면 결국 true 이기 때문에 두 번째 조건문은 보지도 않는다 ^^.
//                      : (2 < 5) || (x = 3) -> 두 번째 피연산자가 무시되며 x가 변경되지 않음
//                      : (7 < 6) || (x = 5) -> 두 번째 피연산자가 평가되며 x에 정수 5 저장.




}